{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar types_1 = require(\"@vibrant/types\"); // const WorkerClass: TaskWorkerClass = require('worker-loader?inline=true!./worker')\n\n\nvar MAX_WORKER_COUNT = 5;\n\nvar WorkerPool =\n/** @class */\nfunction () {\n  function WorkerPool(WorkerClass) {\n    this.WorkerClass = WorkerClass;\n    this._taskId = 0;\n    this._workers = [];\n    this._queue = [];\n    this._executing = {};\n  }\n\n  WorkerPool.prototype._findIdleWorker = function () {\n    var worker; // if no idle worker && worker count < max count, make new one\n\n    if (this._workers.length === 0 || this._workers.length < MAX_WORKER_COUNT) {\n      worker = new this.WorkerClass();\n      worker.id = this._workers.length;\n      worker.idle = true;\n\n      this._workers.push(worker);\n\n      worker.onmessage = this._onMessage.bind(this, worker.id);\n    } else {\n      worker = this._workers.find(function (_a) {\n        var idle = _a.idle;\n        return idle;\n      });\n    }\n\n    return worker;\n  };\n\n  WorkerPool.prototype._enqueue = function (payload, transferList) {\n    var d = types_1.defer(); // make task item\n\n    var task = {\n      id: this._taskId++,\n      payload: payload,\n      transferList: transferList,\n      deferred: d\n    };\n\n    this._queue.push(task); // Try dequeue\n\n\n    this._tryDequeue();\n\n    return d.promise;\n  };\n\n  WorkerPool.prototype._tryDequeue = function () {\n    // Called when a work has finished or from _enqueue\n    // No pending task\n    if (this._queue.length <= 0) return; // Find idle worker\n\n    var worker = this._findIdleWorker(); // No idle worker\n\n\n    if (!worker) return; // Dequeue task\n\n    var task = this._queue.shift();\n\n    this._executing[task.id] = task; // Send payload\n\n    var transfers = task.transferList;\n\n    var deferred = task.deferred,\n        transferList = task.transferList,\n        request = __rest(task, [\"deferred\", \"transferList\"]);\n\n    worker.postMessage(request, transfers);\n    worker.idle = false;\n  };\n\n  WorkerPool.prototype._onMessage = function (workerId, event) {\n    var data = event.data;\n    if (!data) return; // Worker should send result along with payload id\n\n    var id = data.id; // Task is looked up by id\n\n    var task = this._executing[id];\n    delete this._executing[id]; // Resolve or reject deferred promise\n\n    switch (data.type) {\n      case 'return':\n        task.deferred.resolve(data.payload);\n        break;\n\n      case 'error':\n        task.deferred.reject(new Error(data.payload));\n        break;\n    } // Update worker status\n\n\n    this._workers[workerId].idle = true; // Try dequeue next task\n\n    this._tryDequeue();\n  };\n\n  WorkerPool.prototype.invoke = function (args, transferList) {\n    return this._enqueue(args, transferList);\n  };\n\n  return WorkerPool;\n}();\n\nexports.default = WorkerPool;","map":{"version":3,"sources":["../../../../packages/vibrant-worker/src/pool.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"@vibrant/types\");\n// const WorkerClass: TaskWorkerClass = require('worker-loader?inline=true!./worker')\nvar MAX_WORKER_COUNT = 5;\nvar WorkerPool = /** @class */ (function () {\n    function WorkerPool(WorkerClass) {\n        this.WorkerClass = WorkerClass;\n        this._taskId = 0;\n        this._workers = [];\n        this._queue = [];\n        this._executing = {};\n    }\n    WorkerPool.prototype._findIdleWorker = function () {\n        var worker;\n        // if no idle worker && worker count < max count, make new one\n        if (this._workers.length === 0 || this._workers.length < MAX_WORKER_COUNT) {\n            worker = new this.WorkerClass();\n            worker.id = this._workers.length;\n            worker.idle = true;\n            this._workers.push(worker);\n            worker.onmessage = this._onMessage.bind(this, worker.id);\n        }\n        else {\n            worker = this._workers.find(function (_a) {\n                var idle = _a.idle;\n                return idle;\n            });\n        }\n        return worker;\n    };\n    WorkerPool.prototype._enqueue = function (payload, transferList) {\n        var d = types_1.defer();\n        // make task item\n        var task = {\n            id: this._taskId++,\n            payload: payload,\n            transferList: transferList,\n            deferred: d\n        };\n        this._queue.push(task);\n        // Try dequeue\n        this._tryDequeue();\n        return d.promise;\n    };\n    WorkerPool.prototype._tryDequeue = function () {\n        // Called when a work has finished or from _enqueue\n        // No pending task\n        if (this._queue.length <= 0)\n            return;\n        // Find idle worker\n        var worker = this._findIdleWorker();\n        // No idle worker\n        if (!worker)\n            return;\n        // Dequeue task\n        var task = this._queue.shift();\n        this._executing[task.id] = task;\n        // Send payload\n        var transfers = task.transferList;\n        var deferred = task.deferred, transferList = task.transferList, request = __rest(task, [\"deferred\", \"transferList\"]);\n        worker.postMessage(request, transfers);\n        worker.idle = false;\n    };\n    WorkerPool.prototype._onMessage = function (workerId, event) {\n        var data = event.data;\n        if (!data)\n            return;\n        // Worker should send result along with payload id\n        var id = data.id;\n        // Task is looked up by id\n        var task = this._executing[id];\n        delete this._executing[id];\n        // Resolve or reject deferred promise\n        switch (data.type) {\n            case 'return':\n                task.deferred.resolve(data.payload);\n                break;\n            case 'error':\n                task.deferred.reject(new Error(data.payload));\n                break;\n        }\n        // Update worker status\n        this._workers[workerId].idle = true;\n        // Try dequeue next task\n        this._tryDequeue();\n    };\n    WorkerPool.prototype.invoke = function (args, transferList) {\n        return this._enqueue(args, transferList);\n    };\n    return WorkerPool;\n}());\nexports.default = WorkerPool;\n//# sourceMappingURL=pool.js.map"]},"metadata":{},"sourceType":"script"}